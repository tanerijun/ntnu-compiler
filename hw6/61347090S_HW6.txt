Initial Tree:
```
           S
           |\
           E $
          /|\
         E + T
         |   |
         T   (E)
         |    /|\
         ID  E + T
             |   |
             T   ID
             |
             ID
```

Move 1:
```
action(0) => S
push(goto(0, ID)) = push(5)
Input: +
Stack: [0, 5]

           S
           |\
           E $
          /|\
         E + T
         |   |
         T   (E)
         |    /|\
        [ID] E + T
             |   |
             T   ID
             |
             ID
```

Move 2:
```
action(5) => R4
R4: T -> ID
pop(1)
push(goto(0, T)) = push(9)
Stack: [0, 9]

           S
           |\
           E $
          /|\
         E + T
         |   |
         T   (E)
         |    /|\
        [T]  E + T
             |   |
             T   ID
             |
             ID
```

Move 3:
```
action(9) => R3
R3: E -> T
pop(1)
push(goto(0, E)) = push(1)
Stack: [0, 1]

           S
           |\
           E $
          /|\
         E + T
         |   |
        [E]  (E)
             /|\
            E + T
             |   |
             T   ID
             |
             ID
```

Move 4:
```
action(1) => S
push(goto(1, +)) = push(3)
Input: (
Stack: [0, 1, 3]

           S
           |\
           E $
          /|\
         E[+]T
         |   |
        [E]  (E)
             /|\
            E + T
             |   |
             T   ID
             |
             ID
```

Move 5:
```
action(3) => S
push(goto(3, ()) = push(6)
Input: ID
Stack: [0, 1, 3, 6]

           S
           |\
           E $
          /|\
         E[+]T
         |   |
        [E] [(]E)
             /|\
            E + T
             |   |
             T   ID
             |
             ID
```

Move 6:
```
action(6) => S
push(goto(6, ID)) = push(5)
Input: +
Stack: [0, 1, 3, 6, 5]

           S
           |\
           E $
          /|\
         E[+]T
         |   |
        [E] [(]E)
             /|\
            E + T
             |   |
            [ID] ID
             |
             ID
```

Move 7:
```
action(5) => R4
R4: T -> ID
pop(1)
push(goto(6, T)) = push(9)
Stack: [0, 1, 3, 6, 9]

           S
           |\
           E $
          /|\
         E[+]T
         |   |
        [E] [(]E)
             /|\
            E + T
             |   |
            [T] ID
             |
             ID
```

Move 8:
```
action(9) => R3
R3: E -> T
pop(1)
push(goto(6, E)) = push(7)
Stack: [0, 1, 3, 6, 7]

           S
           |\
           E $
          /|\
         E[+]T
         |   |
        [E] [(]E)
             /|\
            [E]+ T
                |
                ID
```

Move 9:
```
action(7) => S
push(goto(7, +)) = push(3)
Input: ID
Stack: [0, 1, 3, 6, 7, 3]

           S
           |\
           E $
          /|\
         E[+]T
         |   |
        [E] [(]E)
             /|\
            [E][+]T
                |
                ID
```

Move 10:
```
action(3) => S
push(goto(3, ID)) = push(5)
Input: )
Stack: [0, 1, 3, 6, 7, 3, 5]

           S
           |\
           E $
          /|\
         E[+]T
         |   |
        [E] [(]E)
             /|\
            [E][+]T
                |
               [ID]
```

Move 11:
```
action(5) => R4
R4: T -> ID
pop(1)
push(goto(3, T)) = push(4)
Stack: [0, 1, 3, 6, 7, 3, 4]

           S
           |\
           E $
          /|\
         E[+]T
         |   |
        [E] [(]E)
             /|\
            [E][+][T]
```

Move 12:
```
action(4) => R2
R2: E -> E + T
pop(3)
push(goto(6, E)) = push(7)
Stack: [0, 1, 3, 6, 7]

           S
           |\
           E $
          /|\
         E[+]T
         |   |
        [E] [(][E])
```

Move 13:
```
action(7) => S
push(goto(7, ))) = push(8)
Input: $
Stack: [0, 1, 3, 6, 7, 8]

           S
           |\
           E $
          /|\
         E[+]T
         |   |
        [E] [(][E][)]
```

Move 14:
```
action(8) => R5
R5: T -> (E)
pop(3)
push(goto(3, T)) = push(4)
Stack: [0, 1, 3, 4]

           S
           |\
           E $
          /|\
         E[+][T]
         |
        [E]
```

Move 15:
```
action(4) => R2
R2: E -> E + T
pop(3)
push(goto(0, E)) = push(1)
Stack: [0, 1]

           S
           |\
           E $
          /|\
        [E]
```

Move 16:
```
action(1) => S
push(goto(1, $)) = push(2)
Input:
Stack: [0, 1, 2]

           S
           |\
          [E][$]
```

Move 17:
```
action(2) => Accept
R1: S -> E$
Final Stack: [0]

           [S]
```
